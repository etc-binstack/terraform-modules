##============================
## KMS Key for Primary Region
##============================
resource "aws_kms_key" "primary_key" {
  count                   = var.enable_module ? 1 : 0
  description             = "KMS key for OTP encryption"
  enable_key_rotation     = var.enable_key_rotation
  multi_region            = var.enable_multi_region
  deletion_window_in_days = 7
  key_usage               = "ENCRYPT_DECRYPT"

  # Temporary default policy to allow creation
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = { AWS = "arn:aws:iam::${local.account_id}:root" },
      Action    = "kms:*",
      Resource  = "*"
    }]
  })

  lifecycle {
    ignore_changes = [policy]
  }
  
  tags = var.tags
}

locals {
  primary_key_policy_vars = {
    region              = var.region
    account_id          = local.account_id
    lambda_role_name    = var.enable_module ? aws_iam_role.lambda_role[0].name : ""
    kms_key_arn         = var.enable_module ? aws_kms_key.primary_key[0].arn : ""
    # Handle empty replica_kms_key_arn for single-region deployments
    replica_kms_key_arn = var.enable_module && var.enable_multi_region ? aws_kms_replica_key.replica_key[0].arn : aws_kms_key.primary_key[0].arn
    secondary_region    = var.enable_module && var.enable_multi_region ? var.secondary_region : var.region
  }
}

resource "aws_kms_key_policy" "primary_policy" {
  count  = var.enable_module ? 1 : 0
  key_id = aws_kms_key.primary_key[0].id
  policy = templatefile(
    var.enable_multi_region ? "${path.module}/templates/kms/mrk_policy.json.tpl" : "${path.module}/templates/kms/policy.json.tpl",
    local.primary_key_policy_vars
  )
  
  depends_on = [aws_kms_key.primary_key, aws_kms_replica_key.replica_key]
}

resource "aws_kms_alias" "primary_key" {
  count         = var.enable_module ? 1 : 0
  name          = "alias/${var.kms_key_alias}-${random_id.this[0].hex}"
  target_key_id = aws_kms_key.primary_key[0].key_id
}

##============================
## KMS Key for Replica Region
##============================
resource "aws_kms_replica_key" "replica_key" {
  count                   = var.enable_module && var.enable_multi_region ? 1 : 0
  provider                = aws.replica
  description             = "KMS Replica key for OTP encryption"
  primary_key_arn         = try(aws_kms_key.primary_key[0].arn, null)
  deletion_window_in_days = 7

  tags = var.tags
}

resource "aws_kms_alias" "replica" {
  count         = var.enable_module && var.enable_multi_region ? 1 : 0
  provider      = aws.replica
  name          = "alias/${var.kms_key_alias}-${random_id.this[0].hex}"
  target_key_id = aws_kms_replica_key.replica_key[0].key_id
}

locals {
  replica_key_policy_vars = {
    region              = var.enable_module && var.enable_multi_region ? var.secondary_region : var.region
    account_id          = local.account_id
    lambda_role_name    = var.enable_module ? aws_iam_role.lambda_role[0].name : ""
    kms_key_arn         = var.enable_module && var.enable_multi_region ? aws_kms_replica_key.replica_key[0].arn : ""
    replica_kms_key_arn = var.enable_module && var.enable_multi_region ? aws_kms_key.primary_key[0].arn : ""
    secondary_region    = var.enable_module && var.enable_multi_region ? var.region : var.secondary_region
  }
}

resource "aws_kms_key_policy" "replica_policy" {
  count    = var.enable_module && var.enable_multi_region ? 1 : 0
  provider = aws.replica
  key_id   = aws_kms_replica_key.replica_key[0].id
  policy = templatefile(
    "${path.module}/templates/kms/mrk_policy.json.tpl",
    local.replica_key_policy_vars
  )
  
  depends_on = [aws_kms_replica_key.replica_key, aws_kms_key.primary_key]
}